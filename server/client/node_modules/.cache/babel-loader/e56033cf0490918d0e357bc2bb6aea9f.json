{"ast":null,"code":"import PropTypes from 'prop-types';\nvar any = PropTypes.any,\n    bool = PropTypes.bool,\n    func = PropTypes.func,\n    shape = PropTypes.shape,\n    string = PropTypes.string,\n    oneOfType = PropTypes.oneOfType,\n    object = PropTypes.object,\n    number = PropTypes.number;\nexport var formPropTypes = {\n  // State:\n  anyTouched: bool.isRequired,\n  // true if any of the fields have been marked as touched\n  asyncValidating: oneOfType([bool, string]).isRequired,\n  // true if async validation is running, a string if a field triggered async validation\n  dirty: bool.isRequired,\n  // true if any values are different from initialValues\n  error: any,\n  // form-wide error from '_error' key in validation result\n  form: string.isRequired,\n  // the name of the form\n  invalid: bool.isRequired,\n  // true if there are any validation errors\n  initialized: bool.isRequired,\n  // true if the form has been initialized\n  initialValues: object,\n  // the initialValues object passed to reduxForm\n  pristine: bool.isRequired,\n  // true if the values are the same as initialValues\n  pure: bool.isRequired,\n  // if true, implements shouldComponentUpdate\n  submitting: bool.isRequired,\n  // true if the form is in the process of being submitted\n  submitFailed: bool.isRequired,\n  // true if the form was submitted and failed for any reason\n  submitSucceeded: bool.isRequired,\n  // true if the form was successfully submitted\n  valid: bool.isRequired,\n  // true if there are no validation errors\n  warning: any,\n  // form-wide warning from '_warning' key in validation result\n  // Actions:\n  array: shape({\n    insert: func.isRequired,\n    // function to insert a value into an array field\n    move: func.isRequired,\n    // function to move a value within an array field\n    pop: func.isRequired,\n    // function to pop a value off of an array field\n    push: func.isRequired,\n    // function to push a value onto an array field\n    remove: func.isRequired,\n    // function to remove a value from an array field\n    removeAll: func.isRequired,\n    // function to remove all the values from an array field\n    shift: func.isRequired,\n    // function to shift a value out of an array field\n    splice: func.isRequired,\n    // function to splice a value into an array field\n    swap: func.isRequired,\n    // function to swap values in an array field\n    unshift: func.isRequired // function to unshift a value into an array field\n\n  }),\n  asyncValidate: func.isRequired,\n  // function to trigger async validation\n  autofill: func.isRequired,\n  // action to set a value of a field and mark it as autofilled\n  blur: func.isRequired,\n  // action to mark a field as blurred\n  change: func.isRequired,\n  // action to change the value of a field\n  clearAsyncError: func.isRequired,\n  // action to clear the async error of a field\n  clearFields: func.isRequired,\n  // action to clean fields values for all fields\n  clearSubmitErrors: func.isRequired,\n  // action to remove submitErrors and error\n  destroy: func.isRequired,\n  // action to destroy the form's data in Redux\n  dispatch: func.isRequired,\n  // the Redux dispatch action\n  handleSubmit: func.isRequired,\n  // function to submit the form\n  initialize: func.isRequired,\n  // action to initialize form data\n  reset: func.isRequired,\n  // action to reset the form data to previously initialized values\n  resetSection: func.isRequired,\n  // action to reset the form sections data to previously initialized values\n  touch: func.isRequired,\n  // action to mark fields as touched\n  submit: func.isRequired,\n  // action to trigger a submission of the specified form\n  untouch: func.isRequired,\n  // action to mark fields as untouched\n  // triggerSubmit\n  triggerSubmit: bool,\n  // if true, submits the form on componentWillReceiveProps\n  clearSubmit: func.isRequired // called before a triggered submit, by default clears triggerSubmit\n\n};\nexport var fieldInputPropTypes = {\n  checked: bool,\n  name: string.isRequired,\n  onBlur: func.isRequired,\n  onChange: func.isRequired,\n  onDragStart: func.isRequired,\n  onDrop: func.isRequired,\n  onFocus: func.isRequired,\n  value: any\n};\nexport var fieldMetaPropTypes = {\n  active: bool.isRequired,\n  asyncValidating: bool.isRequired,\n  autofilled: bool.isRequired,\n  dirty: bool.isRequired,\n  dispatch: func.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitting: bool.isRequired,\n  submitFailed: bool.isRequired,\n  touched: bool.isRequired,\n  valid: bool.isRequired,\n  visited: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayMetaPropTypes = {\n  dirty: bool.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitFailed: bool,\n  submitting: bool,\n  valid: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayFieldsPropTypes = {\n  name: string.isRequired,\n  forEach: func.isRequired,\n  get: func.isRequired,\n  getAll: func.isRequired,\n  insert: func.isRequired,\n  length: number.isRequired,\n  map: func.isRequired,\n  move: func.isRequired,\n  pop: func.isRequired,\n  push: func.isRequired,\n  reduce: func.isRequired,\n  remove: func.isRequired,\n  removeAll: func.isRequired,\n  shift: func.isRequired,\n  swap: func.isRequired,\n  unshift: func.isRequired\n};\nexport var fieldPropTypes = {\n  input: shape(fieldInputPropTypes).isRequired,\n  meta: shape(fieldMetaPropTypes).isRequired\n};\nexport var fieldArrayPropTypes = {\n  fields: shape(fieldArrayFieldsPropTypes).isRequired,\n  meta: shape(fieldArrayMetaPropTypes).isRequired\n};\nexport default formPropTypes;","map":{"version":3,"sources":["/Users/bambi/react/server/client/node_modules/redux-form/es/propTypes.js"],"names":["PropTypes","any","bool","func","shape","string","oneOfType","object","number","formPropTypes","anyTouched","isRequired","asyncValidating","dirty","error","form","invalid","initialized","initialValues","pristine","pure","submitting","submitFailed","submitSucceeded","valid","warning","array","insert","move","pop","push","remove","removeAll","shift","splice","swap","unshift","asyncValidate","autofill","blur","change","clearAsyncError","clearFields","clearSubmitErrors","destroy","dispatch","handleSubmit","initialize","reset","resetSection","touch","submit","untouch","triggerSubmit","clearSubmit","fieldInputPropTypes","checked","name","onBlur","onChange","onDragStart","onDrop","onFocus","value","fieldMetaPropTypes","active","autofilled","touched","visited","fieldArrayMetaPropTypes","fieldArrayFieldsPropTypes","forEach","get","getAll","length","map","reduce","fieldPropTypes","input","meta","fieldArrayPropTypes","fields"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nvar any = PropTypes.any,\n    bool = PropTypes.bool,\n    func = PropTypes.func,\n    shape = PropTypes.shape,\n    string = PropTypes.string,\n    oneOfType = PropTypes.oneOfType,\n    object = PropTypes.object,\n    number = PropTypes.number;\nexport var formPropTypes = {\n  // State:\n  anyTouched: bool.isRequired,\n  // true if any of the fields have been marked as touched\n  asyncValidating: oneOfType([bool, string]).isRequired,\n  // true if async validation is running, a string if a field triggered async validation\n  dirty: bool.isRequired,\n  // true if any values are different from initialValues\n  error: any,\n  // form-wide error from '_error' key in validation result\n  form: string.isRequired,\n  // the name of the form\n  invalid: bool.isRequired,\n  // true if there are any validation errors\n  initialized: bool.isRequired,\n  // true if the form has been initialized\n  initialValues: object,\n  // the initialValues object passed to reduxForm\n  pristine: bool.isRequired,\n  // true if the values are the same as initialValues\n  pure: bool.isRequired,\n  // if true, implements shouldComponentUpdate\n  submitting: bool.isRequired,\n  // true if the form is in the process of being submitted\n  submitFailed: bool.isRequired,\n  // true if the form was submitted and failed for any reason\n  submitSucceeded: bool.isRequired,\n  // true if the form was successfully submitted\n  valid: bool.isRequired,\n  // true if there are no validation errors\n  warning: any,\n  // form-wide warning from '_warning' key in validation result\n  // Actions:\n  array: shape({\n    insert: func.isRequired,\n    // function to insert a value into an array field\n    move: func.isRequired,\n    // function to move a value within an array field\n    pop: func.isRequired,\n    // function to pop a value off of an array field\n    push: func.isRequired,\n    // function to push a value onto an array field\n    remove: func.isRequired,\n    // function to remove a value from an array field\n    removeAll: func.isRequired,\n    // function to remove all the values from an array field\n    shift: func.isRequired,\n    // function to shift a value out of an array field\n    splice: func.isRequired,\n    // function to splice a value into an array field\n    swap: func.isRequired,\n    // function to swap values in an array field\n    unshift: func.isRequired // function to unshift a value into an array field\n\n  }),\n  asyncValidate: func.isRequired,\n  // function to trigger async validation\n  autofill: func.isRequired,\n  // action to set a value of a field and mark it as autofilled\n  blur: func.isRequired,\n  // action to mark a field as blurred\n  change: func.isRequired,\n  // action to change the value of a field\n  clearAsyncError: func.isRequired,\n  // action to clear the async error of a field\n  clearFields: func.isRequired,\n  // action to clean fields values for all fields\n  clearSubmitErrors: func.isRequired,\n  // action to remove submitErrors and error\n  destroy: func.isRequired,\n  // action to destroy the form's data in Redux\n  dispatch: func.isRequired,\n  // the Redux dispatch action\n  handleSubmit: func.isRequired,\n  // function to submit the form\n  initialize: func.isRequired,\n  // action to initialize form data\n  reset: func.isRequired,\n  // action to reset the form data to previously initialized values\n  resetSection: func.isRequired,\n  // action to reset the form sections data to previously initialized values\n  touch: func.isRequired,\n  // action to mark fields as touched\n  submit: func.isRequired,\n  // action to trigger a submission of the specified form\n  untouch: func.isRequired,\n  // action to mark fields as untouched\n  // triggerSubmit\n  triggerSubmit: bool,\n  // if true, submits the form on componentWillReceiveProps\n  clearSubmit: func.isRequired // called before a triggered submit, by default clears triggerSubmit\n\n};\nexport var fieldInputPropTypes = {\n  checked: bool,\n  name: string.isRequired,\n  onBlur: func.isRequired,\n  onChange: func.isRequired,\n  onDragStart: func.isRequired,\n  onDrop: func.isRequired,\n  onFocus: func.isRequired,\n  value: any\n};\nexport var fieldMetaPropTypes = {\n  active: bool.isRequired,\n  asyncValidating: bool.isRequired,\n  autofilled: bool.isRequired,\n  dirty: bool.isRequired,\n  dispatch: func.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitting: bool.isRequired,\n  submitFailed: bool.isRequired,\n  touched: bool.isRequired,\n  valid: bool.isRequired,\n  visited: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayMetaPropTypes = {\n  dirty: bool.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitFailed: bool,\n  submitting: bool,\n  valid: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayFieldsPropTypes = {\n  name: string.isRequired,\n  forEach: func.isRequired,\n  get: func.isRequired,\n  getAll: func.isRequired,\n  insert: func.isRequired,\n  length: number.isRequired,\n  map: func.isRequired,\n  move: func.isRequired,\n  pop: func.isRequired,\n  push: func.isRequired,\n  reduce: func.isRequired,\n  remove: func.isRequired,\n  removeAll: func.isRequired,\n  shift: func.isRequired,\n  swap: func.isRequired,\n  unshift: func.isRequired\n};\nexport var fieldPropTypes = {\n  input: shape(fieldInputPropTypes).isRequired,\n  meta: shape(fieldMetaPropTypes).isRequired\n};\nexport var fieldArrayPropTypes = {\n  fields: shape(fieldArrayFieldsPropTypes).isRequired,\n  meta: shape(fieldArrayMetaPropTypes).isRequired\n};\nexport default formPropTypes;"]},"metadata":{},"sourceType":"module"}